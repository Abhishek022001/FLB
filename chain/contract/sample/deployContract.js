import {ethers} from "ethers";
import fs from 'fs-extra';

export const deployContract = async () => {
    try {
        // read config.json
        const {url, admin_private_key} = await fs.readJSON('../../../chain/config.json');

        // read abi.json and bytecode
        const abi = JSON.parse(fs.readFileSync("../../../chain/abi.json", "utf8"));
        const bytecode = "0x608060405234801561001057600080fd5b50604051610cca380380610cca83398101604081905261002f916100be565b806001600160a01b03811661005e57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6100678161006e565b50506100ee565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100d057600080fd5b81516001600160a01b03811681146100e757600080fd5b9392505050565b610bcd806100fd6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063958c432e11610071578063958c432e14610170578063a466fe0514610183578063b5cb15f7146101b5578063d119db4c146101bd578063d47875d0146101d0578063f2fde38b146101e357600080fd5b80630e666e49146100b95780633dc40f87146100e15780634cd01af1146100f6578063647f94a514610116578063715018a61461014d5780638da5cb5b14610155575b600080fd5b6100cc6100c736600461087d565b6101f6565b60405190151581526020015b60405180910390f35b6100f46100ef3660046108ae565b610209565b005b61010961010436600461095f565b61031e565b6040516100d891906109ad565b61013f61012436600461087d565b6001600160a01b031660009081526005602052604090205490565b6040519081526020016100d8565b6100f4610443565b6000546040516001600160a01b0390911681526020016100d8565b61010961017e36600461095f565b610457565b6101966101913660046109e0565b610510565b604080516001600160a01b0390931683526020830191909152016100d8565b61013f610527565b6100f46101cb36600461095f565b610538565b61013f6101de36600461087d565b6105be565b6100f46101f136600461087d565b6105e7565b6000610203600183610625565b92915050565b60048160405161021991906109f9565b9081526040519081900360200190205460ff16156102765760405162461bcd60e51b815260206004820152601560248201527411185d1848185b1c9958591e481d5c1b1bd8591959605a1b60448201526064015b60405180910390fd5b3360009081526005602090815260408220805460018101825590835291200161029f8282610aa0565b5060016004826040516102b291906109f9565b908152604051908190036020019020805491151560ff199092169190911790556102dd600133610625565b6102f0576102ee6001336000610641565b505b60405133907fb7c74f9f71a3e001c9eff260afd9e048a9274b6a746c06ae03a72ceadfbf63bc90600090a250565b6001600160a01b038216600090815260056020526040902054606090821061037e5760405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b604482015260640161026d565b6001600160a01b03831660009081526005602052604090208054839081106103a8576103a8610b60565b9060005260206000200180546103bd90610a15565b80601f01602080910402602001604051908101604052809291908181526020018280546103e990610a15565b80156104365780601f1061040b57610100808354040283529160200191610436565b820191906000526020600020905b81548152906001019060200180831161041957829003601f168201915b5050505050905092915050565b61044b610657565b6104556000610684565b565b6005602052816000526040600020818154811061047357600080fd5b9060005260206000200160009150915050805461048f90610a15565b80601f01602080910402602001604051908101604052809291908181526020018280546104bb90610a15565b80156105085780601f106104dd57610100808354040283529160200191610508565b820191906000526020600020905b8154815290600101906020018083116104eb57829003601f168201915b505050505081565b60008061051e6001846106d4565b91509150915091565b600061053360016106f2565b905090565b610540610657565b60008061054e6001856106fd565b915091506105748483610561578461056b565b61056b8584610b76565b60019190610641565b50836001600160a01b03167feeb393df22452ffdf99d32bf8b7d2e2da0db4bd96b829ba2a7e5a2e92fc98c65846040516105b091815260200190565b60405180910390a250505050565b600080806105cd6001856106fd565b91509150816105dd5760006105df565b805b949350505050565b6105ef610657565b6001600160a01b03811661061957604051631e4fbdf760e01b81526000600482015260240161026d565b61062281610684565b50565b600061063a836001600160a01b038416610715565b9392505050565b60006105df846001600160a01b03851684610721565b6000546001600160a01b031633146104555760405163118cdaa760e01b815233600482015260240161026d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008080806106e3868661073e565b909450925050505b9250929050565b600061020382610769565b60008080806106e3866001600160a01b038716610774565b600061063a83836107ae565b600082815260028401602052604081208290556105df84846107c6565b6000808061074c85856107d2565b600081815260029690960160205260409095205494959350505050565b6000610203826107de565b60008181526002830160205260408120548190806107a3576107968585610715565b9250600091506106eb9050565b6001925090506106eb565b6000818152600183016020526040812054151561063a565b600061063a83836107e8565b600061063a8383610837565b6000610203825490565b600081815260018301602052604081205461082f57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610203565b506000610203565b600082600001828154811061084e5761084e610b60565b9060005260206000200154905092915050565b80356001600160a01b038116811461087857600080fd5b919050565b60006020828403121561088f57600080fd5b61063a82610861565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156108c057600080fd5b813567ffffffffffffffff808211156108d857600080fd5b818401915084601f8301126108ec57600080fd5b8135818111156108fe576108fe610898565b604051601f8201601f19908116603f0116810190838211818310171561092657610926610898565b8160405282815287602084870101111561093f57600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000806040838503121561097257600080fd5b61097b83610861565b946020939093013593505050565b60005b838110156109a457818101518382015260200161098c565b50506000910152565b60208152600082518060208401526109cc816040850160208701610989565b601f01601f19169190910160400192915050565b6000602082840312156109f257600080fd5b5035919050565b60008251610a0b818460208701610989565b9190910192915050565b600181811c90821680610a2957607f821691505b602082108103610a4957634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610a9b576000816000526020600020601f850160051c81016020861015610a785750805b601f850160051c820191505b81811015610a9757828155600101610a84565b5050505b505050565b815167ffffffffffffffff811115610aba57610aba610898565b610ace81610ac88454610a15565b84610a4f565b602080601f831160018114610b035760008415610aeb5750858301515b600019600386901b1c1916600185901b178555610a97565b600085815260208120601f198616915b82811015610b3257888601518255948401946001909101908401610b13565b5085821015610b505787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b8082018082111561020357634e487b7160e01b600052601160045260246000fdfea2646970667358221220391b169af2b9e41d2d7fb00ad855cc36c1d10a4219bc96d8ce671e69146eb06464736f6c63430008180033"; // 替换为你的合约字节码

        const provider = new ethers.JsonRpcProvider(url);

        // create a wallet (use admin private key)
        const wallet = new ethers.Wallet(admin_private_key, provider);

        const factory = new ethers.ContractFactory(abi, bytecode, wallet);
        const contract = await factory.deploy(wallet.address);

        await contract.waitForDeployment();

        console.log("contract address:", (await contract.getAddress()).toString());
    } catch (error) {
        console.log("error:", error)
    }
};

deployContract();
